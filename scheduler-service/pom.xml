<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.ksoot.scheduler</groupId>
	<artifactId>scheduler-service</artifactId>
	 <version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>scheduler-service</name>
	<description>Spring Boot Quartz Scheduler as a service</description>

	<properties>
		<spring-cloud.version>2022.0.4</spring-cloud.version>
		<springdoc-openapi.version>2.1.0</springdoc-openapi.version>
		<commons-collections4.version>4.4</commons-collections4.version>
		<guava.version>32.1.2-jre</guava.version>
		<mapstruct.version>1.5.5.Final</mapstruct.version>
		<lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
		<hibernate-jpamodelgen.version>6.2.7.FINAL</hibernate-jpamodelgen.version>
		<snakeyaml.version>2.0</snakeyaml.version>

		<spring-boot-commons.version>0.0.1-SNAPSHOT</spring-boot-commons.version>
		<spring-boot-problem-handler.version>1.4</spring-boot-problem-handler.version>

		<maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
		<maven-source-plugin.version>3.2.1</maven-source-plugin.version>
		<maven-javadoc-plugin.version>3.5.0</maven-javadoc-plugin.version>
		<maven-gpg-plugin.version>3.1.0</maven-gpg-plugin.version>
		<nexus-staging-maven-plugin.version>1.6.13</nexus-staging-maven-plugin.version>
		<maven-release-plugin.version>3.0.0-M1</maven-release-plugin.version>
		<maven-deploy-plugin.version>3.1.1</maven-deploy-plugin.version>

		<fmt-maven-plugin.version>2.21.1</fmt-maven-plugin.version>
		<maven-checkstyle-plugin.version>3.3.0</maven-checkstyle-plugin.version>
		<error_prone_core.version>2.4.0</error_prone_core.version>
		<jacoco-maven-plugin.version>0.8.7</jacoco-maven-plugin.version>

		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-autoconfigure-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc-openapi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-web</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-quartz</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok-mapstruct-binding</artifactId>
			<version>${lombok-mapstruct-binding.version}</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.ksoot.scheduler</groupId>
			<artifactId>scheduler-commons</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.ksoot.scheduler</groupId>
			<artifactId>scheduler-jobs</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>io.github.officiallysingh</groupId>
			<artifactId>spring-boot-commons</artifactId>
			<version>${spring-boot-commons.version}</version>
		</dependency>
		<dependency>
			<groupId>io.github.officiallysingh</groupId>
			<artifactId>spring-boot-problem-handler</artifactId>
			<version>${spring-boot-problem-handler.version}</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Auto format code during compilation -->
			<plugin>
				<groupId>com.spotify.fmt</groupId>
				<artifactId>fmt-maven-plugin</artifactId>
				<version>${fmt-maven-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>format</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<release>${java.version}</release>
					<annotationProcessorPaths>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok-mapstruct-binding</artifactId>
							<version>${lombok-mapstruct-binding.version}</version>
						</path>
						<path>
							<groupId>com.google.errorprone</groupId>
							<artifactId>error_prone_core</artifactId>
							<version>${error_prone_core.version}</version>
						</path>
						<path>
							<groupId>org.hibernate.orm</groupId>
							<artifactId>hibernate-jpamodelgen</artifactId>
							<version>${hibernate-jpamodelgen.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
				<executions>
					<!-- Compile the unit test classes to the unit test output directory -->
					<execution>
						<id>default-testCompile</id>
						<goals>
							<goal>testCompile</goal>
						</goals>
						<phase>test-compile</phase>
						<configuration>
							<outputDirectory>${basedir}/target/test-classes</outputDirectory>
							<compileSourceRoots>
								<sourceRoot>${basedir}/src/test/java</sourceRoot>
							</compileSourceRoots>
						</configuration>
					</execution>
					<!-- Compile the integration test classes to the integration test output 
						directory -->
					<execution>
						<id>compile-integration-tests</id>
						<goals>
							<goal>testCompile</goal>
						</goals>
						<phase>pre-integration-test</phase>
						<configuration>
							<outputDirectory>${basedir}/target/integration-test-classes</outputDirectory>
							<compileSourceRoots>
								<sourceRoot>${basedir}/src/integration-test/java</sourceRoot>
							</compileSourceRoots>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Add Unit and Test source package and resources folder to classpath -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-test-source</id>
						<!-- This will help m2eclipse to recognize the folder as source folder 
							after update project configuration. Based on comment updated. -->
						<phase>validate</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/integration-test/java</source>
								<source>src/integration-test/resources</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<!-- # Copy resources for the unit test resources files to the unit 
						test output directory -->
					<execution>
						<id>default-testResources</id>
						<goals>
							<goal>testResources</goal>
						</goals>
						<phase>process-test-resources</phase>
						<configuration>
							<outputDirectory>${basedir}/target/test-classes</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/src/test/resources</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- # Copy resources for the integration test resources files to the 
						integration test output directory -->
					<execution>
						<id>add-integration-test-resources</id>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<phase>pre-integration-test</phase>
						<configuration>
							<outputDirectory>${basedir}/target/integration-test-classes</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/src/integration-test/resources</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Code coverage report -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<testClassesDirectory>${basedir}/target/test-classes</testClassesDirectory>
					<testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>
					<includes>
						<include>**/*.class</include>
					</includes>
					<!-- <argLine>${jacoco.agent.ut.arg}</argLine> -->
					<testFailureIgnore>false</testFailureIgnore>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<id>integration-test</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<includes>
								<include>**/*.class</include>
							</includes>
							<classesDirectory>${project.build.outputDirectory}</classesDirectory>
							<testClassesDirectory>${basedir}/target/integration-test-classes</testClassesDirectory>
							<testSourceDirectory>${basedir}/src/integration-test/java</testSourceDirectory>
						</configuration>
					</execution>
					<execution>
						<id>verify</id>
						<phase>verify</phase>
						<goals>
							<goal>verify</goal>
						</goals>
						<configuration>
							<!-- <testFailureIgnore>false</testFailureIgnore> -->
							<testFailureIgnore>true</testFailureIgnore>
						</configuration>
					</execution>
					<!-- <execution> -->
					<!-- <goals> -->
					<!-- <goal>integration-test</goal> -->
					<!-- <goal>verify</goal> -->
					<!-- </goals> -->
					<!-- </execution> -->
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>coverage-initialize</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>coverage-report</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
